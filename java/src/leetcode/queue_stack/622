class MyCircularQueue {
    int front = 0;
    int rear = -1;
    int size = 0;
    int[] elements;

    public MyCircularQueue(int k) {
        elements = new int[k];
    }

    public boolean enQueue(int value) {
        if (isFull()) {
            return false;
        }
        rear = nextIndex(rear);
        elements[rear] = value;
        size++;
        return true;
    }

    public boolean deQueue() {
        if (isEmpty()) {
            return false;
        }
        front = nextIndex(front);
        size--;
        return true;
    }

    private int nextIndex(int index) {
        return (index + 1) % elements.length;
    }

    public int Front() {
        if (isEmpty()) {
            return -1;
        }
        return elements[front];
    }

    public int Rear() {
        if (isEmpty()) {
            return -1;
        }
        return elements[rear];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return elements.length == size;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such: MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value); boolean param_2 = obj.deQueue(); int param_3 = obj.Front(); int param_4 =
 * obj.Rear(); boolean param_5 = obj.isEmpty(); boolean param_6 = obj.isFull();
 */
