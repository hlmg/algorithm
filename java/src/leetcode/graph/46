import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> answer = new ArrayList<>();
        dfs(new boolean[nums.length], nums, new ArrayDeque<>(), answer);
        return answer;
    }

    private void dfs(boolean[] used, int[] nums, Deque<Integer> permutation, List<List<Integer>> answer) {
        if (permutation.size() == nums.length) {
            answer.add(new ArrayList<>(permutation));
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            permutation.push(nums[i]);
            used[i] = true;
            dfs(used, nums, permutation, answer);
            permutation.pop();
            used[i] = false;
        }
    }
}
