import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> answer = new ArrayList<>();
        dfs(0, candidates, target, new ArrayDeque<>(), answer);
        return answer;
    }

    private void dfs(int index, int[] candidates, int target, Deque<Integer> nums, List<List<Integer>> answer) {
        if (target == 0) {
            answer.add(new ArrayList<>(nums));
            return;
        }
        if (target < 0) {
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            nums.push(candidates[i]);
            dfs(i, candidates, target - candidates[i], nums, answer);
            nums.pop();
        }
    }
}
