import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.PriorityQueue;
import java.util.Queue;

class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();
        for (int[] flight : flights) {
            graph.putIfAbsent(flight[0], new HashMap<>());
            graph.get(flight[0]).put(flight[1], flight[2]);
        }

        int[] counts = new int[n];
        Arrays.fill(counts, Integer.MAX_VALUE);
        Queue<List<Integer>> pq = new PriorityQueue<>(Comparator.comparingInt(o -> o.get(1)));
        pq.offer(List.of(src, 0, 0));
        while (!pq.isEmpty()) {
            List<Integer> from = pq.poll();
            Integer key = from.get(0);
            Integer value = from.get(1);
            Integer count = from.get(2);
            if (count > counts[key] || count > k + 1) {
                continue;
            }
            counts[key] = count;
            if (key == dst) {
                return value;
            }
            if (!graph.containsKey(key)) {
                continue;
            }
            for (Entry<Integer, Integer> to : graph.get(key).entrySet()) {
                pq.offer(List.of(to.getKey(), to.getValue() + value, count + 1));
            }
        }
        return -1;
    }
}
